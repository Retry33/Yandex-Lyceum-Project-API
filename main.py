from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackContext
from telegram import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Update

from googletrans import Translator
import math
import datetime
from datetime import timezone, timedelta
import requests

from data import db_session
from data.users import User

from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
OpenWeather_TOKEN = os.getenv('OPENWEATHER_TOKEN')
Geocoder_TOKEN = os.getenv('GEOCODER_TOKEN')
CURRENCY_TOKEN = os.getenv("CURRENCY_TOKEN")
ENTER_CURRENCY_PAIR = 0

code_to_smile = {
    "Clear": "–Ø—Å–Ω–æ \U00002600",
    "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
    "Rain": "–î–æ–∂–¥—å \U00002614",
    "Drizzle": "–î–æ–∂–¥—å \U00002614",
    "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
    "Snow": "–°–Ω–µ–≥ \U0001F328",
    "Mist": "–¢—É–º–∞–Ω \U0001F32B"
}
translator = Translator()
LANGUAGES = {
    '—Ä—É—Å—Å–∫–æ–≥–æ': 'ru', '—Ä—É—Å—Å–∫–∏–π': 'ru',
    '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ': 'en', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en',
    '–∏—Å–ø–∞–Ω—Å–∫–∏–π': 'es', '–∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ': 'es',
    '–∫–∞–Ω–∞–¥—Å–∫–∏–π': 'kn', '–∫–∞–Ω–∞–¥—Å–∫–æ–≥–æ': 'kn',
    '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π': 'pt', '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ': 'pt',
    '–∞—Ä–∞–±—Å–∫–∏–π': 'ar', '–∞—Ä–∞–±—Å–∫–æ–≥–æ': 'ar',
    '–Ω–µ–º–µ—Ü–∫–∏–π': 'de', '–Ω–µ–º–µ—Ü–∫–æ–≥–æ': 'de',
    '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': 'fr', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ': 'fr',
    '—Ö–∏–Ω–¥–∏': 'hi',
    '–≥—Ä–µ—á–µ—Å–∫–∏–π': 'el', '–≥—Ä–µ—á–µ—Å–∫–æ–≥–æ': 'el'
}


def get_keyboard_for_menu():
    wether_button = KeyboardButton('‚òÄ–ú–æ—è –ø–æ–≥–æ–¥–∞‚òÄ', request_location=True)
    reply_keyboard = KeyboardButton('/notification')
    my_keboard = ReplyKeyboardMarkup([['üôè–ü–æ–º–æ—â—åüôè'], [wether_button, 'üå¶–ü–æ–≥–æ–¥–∞üå¶'], ['üà≥–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫üà≥'], [reply_keyboard]],
                                     resize_keyboard=True)
    return my_keboard


def get_keyboard_for_translator():
    my_keboard = ReplyKeyboardMarkup(
        [['—Ä—É—Å—Å–∫–∏–π', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'], ['–∏—Å–ø–∞–Ω—Å–∫–∏–π', '–∫–∞–Ω–∞–¥—Å–∫–∏–π'], ['–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', '–∞—Ä–∞–±—Å–∫–∏–π'],
         ['–Ω–µ–º–µ—Ü–∫–∏–π', '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'], ['—Ö–∏–Ω–¥–∏', '–≥—Ä–µ—á–µ—Å–∫–æ–≥–æ'], ['/stop']], resize_keyboard=True)
    return my_keboard


def get_keyboard_for_text():
    my_keboard = ReplyKeyboardMarkup([['/stop']], resize_keyboard=True)
    return my_keboard


def get_keyboard_stop():
    reply_keyboard = KeyboardButton('/stop')
    my_keboard = ReplyKeyboardMarkup([[reply_keyboard]], resize_keyboard=True,
                                     one_time_keyboard=True)
    return my_keboard


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    await update.message.reply_html(
        f"üëãüëãüëã–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π...\n\n\n‚ùì–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö "
        f"—Ñ—É–Ω–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—à—å¬ª‚ùì.",
        reply_markup=get_keyboard_for_menu())


async def help_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_html(
        "‚ùó–í –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤—Å—ë–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞‚ùó\n\n\n"
        "üî∏<u><b>–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫</b></u>\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º "
        "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:\n<b>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å</b> <i>—è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–π —Ñ—Ä–∞–∑—ã</i> <b>–Ω–∞</b> <i>—è–∑—ã–∫ "
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</i> ...\n–ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–≤–µ–¥–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\n\n\n"
        "üî∏<u><b>–°–∏–Ω–æ–ø—Ç–∏–∫</b></u>\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
        "¬´–ú–æ—è –ø–æ–≥–æ–¥–∞¬ª, –ø—Ä–∏ —ç—Ç–æ–º –≤ —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ "
        "—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:\n<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ</b> <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</i>\n–ü—Ä–∏–º–µ—Ä: "
        "–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–∞", reply_markup=get_keyboard_for_menu())


def wether(city):
    global code_to_smile

    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={OpenWeather_TOKEN}")
    data = response.json()
    city = data["name"]
    cur_temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    pressure = data["main"]["pressure"]
    wind = data["wind"]["speed"]

    # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(
        data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

    weather_description = data["weather"][0]["main"]

    time_zone = data["timezone"]

    tz = timezone(timedelta(seconds=time_zone))

    if weather_description in code_to_smile:
        wd = code_to_smile[weather_description]
    else:
        # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞..."
    return f"‚åö{datetime.datetime.now(tz).strftime('%d-%m-%Y %H:%M')}\n\n" \
           f"üü†<u><b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}</b></u>üü†\n\n" \
           f"üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C {wd}\n" \
           f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
           f"üåç–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n" \
           f"üí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n" \
           f"üåò–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}"


async def my_wether(update, context):
    global Geocoder_TOKEN
    Location = str(update.message.location).split('Location(latitude=')
    Location = Location[1].split(', longitude=')
    latitude, longitude = Location[0], Location[1]

    headers = {"Accept-Language": "ru"}
    address = requests.get(
        f'https://eu1.locationiq.com/v1/reverse.php?key={Geocoder_TOKEN}&lat={latitude}&lon={longitude[:-1]}'
        f'&format=json',
        headers=headers).json()
    await update.message.reply_html(wether(address["address"].get("city")), reply_markup=get_keyboard_for_menu())


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º
async def translation(update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=get_keyboard_for_text())
    return 1


async def start_language(update, context):
    context.user_data['text'] = update.message.text
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ (—Å –∫–∞–∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏).", reply_markup=get_keyboard_for_translator())
    return 2


async def end_language(update, context):
    context.user_data['src'] = update.message.text
    await update.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π —è–∑—ã–∫ (–Ω–∞ –∫–∞–∫–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏).", reply_markup=get_keyboard_for_translator())
    return 3


async def end_translation(update, context):
    try:
        src = LANGUAGES[context.user_data['src']]
        dest = LANGUAGES[update.message.text]
        text = context.user_data['text']

        await update.message.reply_text(translator.translate(text, src=src, dest=dest).text,
                                        reply_markup=get_keyboard_for_menu())
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as error:
        print(error)
        await update.message.reply_text(
            "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ",
            reply_markup=get_keyboard_for_menu())
        context.user_data.clear()
        return ConversationHandler.END


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º
# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏–Ω–æ–ø—Ç–∏–∫–æ–º
async def city_wether(update, context):
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∂–µ–ª–∞–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?.", reply_markup=get_keyboard_for_text())
    return 1


async def end_wether(update, context):
    try:
        city = update.message.text
        await update.message.reply_html(wether(city), reply_markup=get_keyboard_for_menu())
        return ConversationHandler.END

    except Exception as error:
        print(error)
        await update.message.reply_text(
            "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
            reply_markup=get_keyboard_for_menu())
        return ConversationHandler.END


# –ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏–Ω–æ–ø—Ç–∏–∫–æ–º
async def stop(update, context):
    await update.message.reply_text("–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞!", reply_markup=get_keyboard_for_menu())
    return ConversationHandler.END


async def echo(update, context):
    global translator, LANGUAGES
    if '–ü–µ—Ä–µ–≤–µ–¥–∏' in update.message.text:
        try:
            src = LANGUAGES[update.message.text.split()[2]]
            dest = LANGUAGES[update.message.text.split()[4]]
            text = ' '.join(update.message.text.split()[5:])

            await update.message.reply_text(translator.translate(text, src=src, dest=dest).text,
                                            reply_markup=get_keyboard_for_menu())
        except Exception as error:
            print(error)
            await update.message.reply_text(
                "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ",
                reply_markup=get_keyboard_for_menu())

    elif '–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ' in update.message.text:
        try:
            city = update.message.text.split('–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ')[-1]
            await update.message.reply_html(wether(city), reply_markup=get_keyboard_for_menu())

        except Exception as error:
            print(error)
            await update.message.reply_text(
                "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                reply_markup=get_keyboard_for_menu())


# –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–º–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def exchange_rate_command(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'USD/RUB':")
    return ENTER_CURRENCY_PAIR


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
async def handle_currency_pair(update: Update, context: CallbackContext):
    try:
        base_currency, target_currency = update.message.text.split('/')
        response = requests.get(f'https://v6.exchangerate-api.com/v6/{CURRENCY_TOKEN}/latest/{base_currency}')
        data = response.json()
        if data['result'] == 'success':
            rate = data['conversion_rates'].get(target_currency.upper())
            if rate:
                await update.message.reply_text(
                    f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {base_currency}/{target_currency}: 1 {base_currency} = {rate} {target_currency}")
                return ConversationHandler.END
            else:
                await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã {base_currency}/{target_currency} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.")
    except Exception as e:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    return ENTER_CURRENCY_PAIR


def remove_job_if_exists(name, context):
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


async def task(context):
    await context.bot.send_message(context.job.chat_id, text=f'–ù–∞–ø–æ–º–Ω–∏–∞—é {TEXT}!')


async def notification(update, context):
    await update.message.reply_text("–û —á–µ–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?")
    return 1


async def first_response(update, context):
    context.user_data['time'] = update.message.text
    await update.message.reply_text(
        f'–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å "{context.user_data["time"]}"?')
    # –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º states[2]
    return 2


async def second_response(update, context):
    global TIMER, TEXT
    time = update.message.text
    TIMER = int(time)
    TEXT = context.user_data['time']
    chat_id = update.effective_message.chat_id
    context.job_queue.run_once(task, TIMER, chat_id=chat_id, name=str(chat_id), data=TIMER)
    text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {TIMER} c.!'
    await update.effective_message.reply_text(text, reply_markup=get_keyboard_stop())
    return ConversationHandler.END


async def stop_dialog(update, context):
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!' if job_removed else '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'
    context.user_data.clear()
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def close_keyboard(update, context):
    await update.message.reply_text(
        "Ok",
        reply_markup=ReplyKeyboardRemove()
    )


def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    application = Application.builder().token(BOT_TOKEN).build()

    db_session.global_init("db/fast_translator.db")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–º–∞–Ω–¥.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("close", close_keyboard))
    application.add_handler(CommandHandler('stop_dialog', stop_dialog))

    translation_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üà≥–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫üà≥'), translation)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_language)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_language)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_translation)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(translation_handler)

    wether_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üå¶–ü–æ–≥–æ–¥–∞üå¶'), city_wether)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, end_wether)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('exchange', exchange_rate_command)],
        states={
            ENTER_CURRENCY_PAIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_currency_pair)],
        },
        fallbacks=[],
    )

    conver_handler = ConversationHandler(
        entry_points=[CommandHandler('notification', notification)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)]
        },
        fallbacks=[CommandHandler('stop_dialog', stop_dialog)]
    )

    application.add_handler(conver_handler)
    application.add_handler(wether_handler)
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex('üôè–ü–æ–º–æ—â—åüôè'), help_command))
    application.add_handler(MessageHandler(filters.LOCATION, my_wether))
    application.add_handler(MessageHandler(filters.TEXT, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
