from telegram.ext import Application, MessageHandler, filters, CommandHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton
from googletrans import Translator

import math
import datetime
from datetime import timezone, timedelta
import requests

BOT_TOKEN = ''
OpenWeather_TOKEN = ''
Geocoder_TOKEN = ''

code_to_smile = {
    "Clear": "–Ø—Å–Ω–æ \U00002600",
    "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
    "Rain": "–î–æ–∂–¥—å \U00002614",
    "Drizzle": "–î–æ–∂–¥—å \U00002614",
    "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
    "Snow": "–°–Ω–µ–≥ \U0001F328",
    "Mist": "–¢—É–º–∞–Ω \U0001F32B"
}
translator = Translator()
LANGUAGES = {
    '—Ä—É—Å—Å–∫–æ–≥–æ': 'ru', '—Ä—É—Å—Å–∫–∏–π': 'ru',
    '–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ': 'en', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'en'
}


def get_keyboard():
    wether_button = KeyboardButton('‚òÄ–ú–æ—è –ø–æ–≥–æ–¥–∞‚òÄ', request_location=True)
    my_keboard = ReplyKeyboardMarkup([['üôè–ü–æ–º–æ—â—åüôè'], [wether_button]], resize_keyboard=True)
    return my_keboard


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    await update.message.reply_html(
        f"üëãüëãüëã–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π...\n\n\n‚ùì–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –º–æ–∏—Ö "
        f"—Ñ—É–Ω–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—à—å¬ª‚ùì.",
        reply_markup=get_keyboard())


async def help_command(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_html(
        "‚ùó–í –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤—Å—ë–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –±–æ—Ç–∞‚ùó\n\n\n"
        "üî∏<u><b>–ö–∞—Ä–º–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫</b></u>\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ —Å–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º "
        "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:\n<b>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å</b> <i>—è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–π —Ñ—Ä–∞–∑—ã</i> <b>–Ω–∞</b> <i>—è–∑—ã–∫ "
        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</i> ...\n–ü—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–≤–µ–¥–∏ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ü–∏—Ä–≤–µ—Ç –º–∏—Ä!\n\n\n"
        "üî∏<u><b>–°–∏–Ω–æ–ø—Ç–∏–∫</b></u>\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "
        "¬´–ú–æ—è –ø–æ–≥–æ–¥–∞¬ª, –ø—Ä–∏ —ç—Ç–æ–º –≤ —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n\n"
        "–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–≥–æ–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ —Å–æ–±—â–µ–Ω–∏–µ —Å–æ "
        "—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º:\n<b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ</b> <i>–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</i>\n–ü—Ä–∏–º–µ—Ä: "
        "–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–∞", reply_markup=get_keyboard())


def wether(city):
    global code_to_smile

    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={OpenWeather_TOKEN}")
    data = response.json()
    city = data["name"]
    cur_temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    pressure = data["main"]["pressure"]
    wind = data["wind"]["speed"]

    # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
    length_of_the_day = datetime.datetime.fromtimestamp(
        data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

    weather_description = data["weather"][0]["main"]

    time_zone = data["timezone"]

    tz = timezone(timedelta(seconds=time_zone))

    if weather_description in code_to_smile:
        wd = code_to_smile[weather_description]
    else:
        # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞..."
    return f"‚åö{datetime.datetime.now(tz).strftime('%d-%m-%Y %H:%M')}\n\n" \
           f"üü†<u><b>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}</b></u>üü†\n\n" \
           f"üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}¬∞C {wd}\n" \
           f"üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
           f"üåç–î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç\n" \
           f"üí®–í–µ—Ç–µ—Ä: {wind} –º/—Å \n" \
           f"üåò–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}"


async def my_wether(update, context):
    global Geocoder_TOKEN
    Location = str(update.message.location).split('Location(latitude=')
    Location = Location[1].split(', longitude=')
    latitude, longitude = Location[0], Location[1]

    headers = {"Accept-Language": "ru"}
    address = requests.get(
        f'https://eu1.locationiq.com/v1/reverse.php?key={Geocoder_TOKEN}&lat={latitude}&lon={longitude[:-1]}'
        f'&format=json',
        headers=headers).json()
    await update.message.reply_html(wether(address["address"].get("city")))


async def echo(update, context):
    global translator, LANGUAGES
    if '–ü–µ—Ä–µ–≤–µ–¥–∏' in update.message.text:
        try:
            src = LANGUAGES[update.message.text.split()[2]]
            dest = LANGUAGES[update.message.text.split()[4]]
            text = ' '.join(update.message.text.split()[5:])

            await update.message.reply_text(translator.translate(text, src=src, dest=dest).text)
        except Exception as error:
            print(error)
            await update.message.reply_text(
                "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ")

    elif '–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ' in update.message.text:
        try:
            city = update.message.text.split('–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ')[-1]
            await update.message.reply_html(wether(city))

        except Exception as error:
            print(error)
            await update.message.reply_text(
                "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")


def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–º–∞–Ω–¥.
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Regex('üôè–ü–æ–º–æ—â—åüôè'), help_command))
    application.add_handler(MessageHandler(filters.LOCATION, my_wether))
    application.add_handler(MessageHandler(filters.TEXT, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
